import { Lensflare } from 'three/examples/jsm/objects/Lensflare';
import { Texture } from 'three';
import { TresColor } from '@tresjs/core';
import { LensflareElementProps, SeedProps } from '.';

export interface LensflareProps {
    /**
     * scale of the lensflare
     */
    scale?: number;
    /**
     * array of lensflare element properties
     */
    elements?: Partial<LensflareElementProps>[];
    /**
     * random seed for generating random seeded elements
     */
    seed?: number;
    /**
     * specifications for generating random seeded elements
     */
    seedProps?: SeedProps[];
    /**
     * default color of lensflare elements
     */
    color?: TresColor;
    /**
     *  default distance of lensflare elements from flare center
     */
    distance?: number;
    /**
     *  default size of lensflare elements
     */
    size?: number;
    /**
     * default texture of lensflare elements
     */
    texture?: Texture | string[];
}
declare const _default: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<LensflareProps>, {
    scale: number;
    elements: undefined;
    seed: undefined;
    seedProps: undefined;
    color: undefined;
    distance: undefined;
    size: undefined;
    texture: undefined;
}>, {
    value: import('vue').ShallowRef<Lensflare | undefined>;
}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<LensflareProps>, {
    scale: number;
    elements: undefined;
    seed: undefined;
    seedProps: undefined;
    color: undefined;
    distance: undefined;
    size: undefined;
    texture: undefined;
}>>>, {
    color: import('three').ColorRepresentation | [r: number, g: number, b: number];
    texture: string[] | Texture;
    scale: number;
    elements: Partial<LensflareElementProps>[];
    distance: number;
    size: number;
    seed: number;
    seedProps: SeedProps[];
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
