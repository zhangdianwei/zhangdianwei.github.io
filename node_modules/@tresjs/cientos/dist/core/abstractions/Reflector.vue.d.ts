import { TresColor } from '@tresjs/core';
import { Reflector } from 'three/examples/jsm/objects/Reflector.js';

export interface ReflectorProps {
    /**
     * The color of the reflector.
     *
     * @default '#333'
     * @type {TresColor}
     * @memberof ReflectorProps
     *
     */
    color?: TresColor;
    /**
     * The textureWidth of the internal WebGLRenderTarget.
     *
     * @default window.innerWidth
     * @type {number}
     * @memberof ReflectorProps
     *
     */
    textureWidth?: number;
    /**
     * The textureHeight of the internal WebGLRenderTarget.
     *
     * @default window.innerHeight
     * @type {number}
     * @memberof ReflectorProps
     *
     */
    textureHeight?: number;
    /**
     * The clipBias.
     *
     * @default 0
     * @type {number}
     * @memberof ReflectorProps
     *
     */
    clipBias?: number;
    /**
     * The multisample.
     *
     * @default 4
     * @type {number}
     * @memberof ReflectorProps
     *
     */
    multisample?: number;
    /**
     * Custom shader.
     *
     * @default Reflector.ReflectorShader
     * @type {object}
     * @memberof ReflectorProps
     *
     */
    shader?: object;
}
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ReflectorProps>, {
    color: string;
    textureWidth: number;
    textureHeight: number;
    clipBias: number;
    multisample: number;
    shader: any;
}>, {
    reflectorRef: import('vue').ShallowRef<Reflector | undefined>;
}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ReflectorProps>, {
    color: string;
    textureWidth: number;
    textureHeight: number;
    clipBias: number;
    multisample: number;
    shader: any;
}>>>, {
    color: import('three').ColorRepresentation | [r: number, g: number, b: number];
    textureWidth: number;
    textureHeight: number;
    clipBias: number;
    multisample: number;
    shader: object;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
