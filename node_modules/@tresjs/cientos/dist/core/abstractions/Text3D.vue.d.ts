export interface Glyph {
    _cachedOutline: string[];
    ha: number;
    o: string;
}
export interface FontData {
    boundingBox: {
        yMax: number;
        yMin: number;
    };
    familyName: string;
    glyphs: {
        [k: string]: Glyph;
    };
    resolution: number;
    underlineThickness: number;
}
export interface Text3DProps {
    /**
     *
     *  The JSON font to use for the text.
     *  Text3D requires fonts in JSON format generated through [typeface.json](http://gero3.github.io/facetype.js)
     *
     * @type {(FontData | string)}
     * @memberof Text3DProps
     * @see https://threejs.org/docs/index.html?q=TEXT#examples/en/geometries/TextGeometry
     */
    font: FontData | string;
    /**
     * The text to display.
     *
     * @type {string}
     * @memberof Text3DProps
     */
    text?: string;
    /**
     * The size of the text.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0.5
     */
    size?: number;
    /**
     * The height of the text.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0.2
     */
    height?: number;
    /**
     * The curve segments of the text.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 5
     */
    curveSegments?: number;
    /**
     * Turn on bevel
     *
     * @type {boolean}
     * @memberof Text3DProps
     * @default true
     */
    bevelEnabled?: boolean;
    /**
     * How deep into text bevel goes.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0.05
     */
    bevelThickness?: number;
    /**
     * How far from text outline is bevel.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0.02
     */
    bevelSize?: number;
    /**
     * How far from text outline is bevel.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 0
     */
    bevelOffset?: number;
    /**
     * How many bevel segments.
     *
     * @type {number}
     * @memberof Text3DProps
     * @default 4
     */
    bevelSegments?: number;
    /**
     * Whether to center the text.
     *
     * @type {boolean}
     * @memberof Text3DProps
     * @default false
     */
    center?: boolean;
    /**
     * Whether to update the text.
     *
     * @type {boolean}
     * @memberof Text3DProps
     * @default false
     */
    needUpdates?: boolean;
}
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Text3DProps>, {
    size: number;
    height: number;
    curveSegments: number;
    bevelEnabled: boolean;
    bevelThickness: number;
    bevelSize: number;
    bevelOffset: number;
    bevelSegments: number;
    center: boolean;
    needUpdates: boolean;
}>, {
    value: import('vue').ShallowRef<any>;
}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Text3DProps>, {
    size: number;
    height: number;
    curveSegments: number;
    bevelEnabled: boolean;
    bevelThickness: number;
    bevelSize: number;
    bevelOffset: number;
    bevelSegments: number;
    center: boolean;
    needUpdates: boolean;
}>>>, {
    height: number;
    center: boolean;
    size: number;
    curveSegments: number;
    bevelEnabled: boolean;
    bevelThickness: number;
    bevelSize: number;
    bevelOffset: number;
    bevelSegments: number;
    needUpdates: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
