export interface KeyboardControlsProps {
    /**
     * Keys to go forward.
     * @type {string[]}
     * @default '[w, W]'
     * @memberof KeyboardControlsProps
     *
     */
    forward?: string[] | string;
    /**
     * Keys to go back.
     * @type {string[]}
     * @default '[s, S]'
     * @memberof KeyboardControlsProps
     *
     */
    back?: string[] | string;
    /**
     * Keys to go left.
     * @type {string[]}
     * @default '[a, A]'
     * @memberof KeyboardControlsProps
     *
     */
    left?: string[] | string;
    /**
     * Keys to go right.
     * @type {string[]}
     * @default '[d, D]'
     * @memberof KeyboardControlsProps
     *
     */
    right?: string[] | string;
    /**
     * Key to jump (only with PointerLockControls).
     * @type {string[]}
     * @default 'space'
     * @memberof KeyboardControlsProps
     *
     */
    jump?: string[] | string;
    /**
     * Default gravity number for jump.
     * @type {number}
     * @default 9.8
     * @memberof KeyboardControlsProps
     *
     */
    gravity?: number;
    /**
     * Speed movement.
     * @type {number}
     * @default 0.1
     * @memberof KeyboardControlsProps
     *
     */
    moveSpeed?: number;
    /**
     * Activate/deactivate headBobbing effect (only with PointerLockControls).
     * @type {boolean}
     * @default false
     * @memberof KeyboardControlsProps
     *
     */
    headBobbing?: boolean;
    /**
     * Indicates if the forward movement is in the Z axis or Y axis.
     * @type {boolean}
     * @default false
     * @memberof KeyboardControlsProps
     *
     */
    is2D?: boolean;
}
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<KeyboardControlsProps>, {
    forward: () => string[];
    back: () => string[];
    left: () => string[];
    right: () => string[];
    jump: () => string[];
    gravity: number;
    moveSpeed: number;
    headBobbing: boolean;
    is2D: boolean;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<KeyboardControlsProps>, {
    forward: () => string[];
    back: () => string[];
    left: () => string[];
    right: () => string[];
    jump: () => string[];
    gravity: number;
    moveSpeed: number;
    headBobbing: boolean;
    is2D: boolean;
}>>>, {
    left: string | string[];
    right: string | string[];
    forward: string | string[];
    back: string | string[];
    jump: string | string[];
    gravity: number;
    moveSpeed: number;
    headBobbing: boolean;
    is2D: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
