import { Camera, Object3D } from 'three';

export interface TransformControlsProps {
    object: Object3D;
    camera?: Camera;
    mode?: string;
    enabled?: boolean;
    axis?: 'X' | 'Y' | 'Z' | 'XY' | 'YZ' | 'XZ' | 'XYZ';
    translationSnap?: number;
    rotationSnap?: number;
    scaleSnap?: number;
    space?: 'local' | 'world';
    size?: number;
    showX?: boolean;
    showY?: boolean;
    showZ?: boolean;
}
declare const _default: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TransformControlsProps>, {
    mode: string;
    enabled: boolean;
    axis: string;
    space: string;
    size: number;
    showX: boolean;
    showY: boolean;
    showZ: boolean;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (...args: any[]) => void;
    dragging: (...args: any[]) => void;
    mouseDown: (...args: any[]) => void;
    mouseUp: (...args: any[]) => void;
    objectChange: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TransformControlsProps>, {
    mode: string;
    enabled: boolean;
    axis: string;
    space: string;
    size: number;
    showX: boolean;
    showY: boolean;
    showZ: boolean;
}>>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onDragging?: ((...args: any[]) => any) | undefined;
    onMouseDown?: ((...args: any[]) => any) | undefined;
    onMouseUp?: ((...args: any[]) => any) | undefined;
    onObjectChange?: ((...args: any[]) => any) | undefined;
}, {
    size: number;
    enabled: boolean;
    mode: string;
    axis: "XYZ" | "X" | "Y" | "Z" | "XY" | "YZ" | "XZ";
    space: "local" | "world";
    showX: boolean;
    showY: boolean;
    showZ: boolean;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
