import { TresOptions } from '@tresjs/core';
import { MeshBasicMaterialParameters } from 'three';

interface SVGProps {
    /**
     *
     * The SVG data or path to an SVG file
     *
     * @type {string}
     * @required
     * @memberof SVGProps
     *
     */
    src: string;
    /**
     *
     * Whether to draw strokes
     *
     * @type {boolean}
     * @default false
     * @memberof SVGProps
     *
     */
    skipStrokes?: boolean;
    /**
     *
     * Whether to draw fills
     *
     * @type {boolean}
     * @default false
     * @memberof SVGProps
     *
     */
    skipFills?: boolean;
    /**
     *
     * Fill material properties
     *
     * @type {MeshBasicMaterialParameters}
     * @default undefined
     * @memberof SVGProps
     *
     */
    fillMaterial?: MeshBasicMaterialParameters;
    /**
     *
     * Stroke material properties
     *
     * @type {MeshBasicMaterialParameters}
     * @default undefined
     * @memberof SVGProps
     *
     */
    strokeMaterial?: MeshBasicMaterialParameters;
    /**
     *
     * Fill Mesh properties
     *
     * @type {TresOptions}
     * @default undefined
     * @memberof SVGProps
     *
     */
    fillMeshProps?: TresOptions;
    /**
     *
     * Stroke Mesh properties
     *
     * @type {TresOptions}
     * @default undefined
     * @memberof SVGProps
     *
     */
    strokeMeshProps?: TresOptions;
    /**
     *
     * Depth type
     * How should the resulting meshes and materials be rendered?
     * 'renderOrder' disables `depthWrite` and sets the `renderOrder` of each layer.
     * 'flat' disables `depthWrite` on materials.
     * 'offsetZ' enables `depthWrite` and inserts a small distance between each layer on the z-axis to avoid z-fighting.
     * number is treated the same as 'offsetZ'; the number is used as the distance between layers
     *
     * depthWrite documentation: https://threejs.org/docs/#api/en/materials/Material.depthWrite
     * renderOrder documentation: https://threejs.org/docs/?q=mesh#api/en/core/Object3D.renderOrder
     *
     * @type { 'renderOrder' | 'flat' | 'offsetZ' | number }
     * @default 'renderOrder'
     * @memberof SVGProps
     *
     */
    depth?: 'renderOrder' | 'flat' | 'offsetZ' | number;
}
declare const _default: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<SVGProps>, {
    skipStrokes: boolean;
    skipFills: boolean;
    depth: string;
}>, {
    value: import('vue').ShallowRef<any>;
}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<SVGProps>, {
    skipStrokes: boolean;
    skipFills: boolean;
    depth: string;
}>>>, {
    depth: number | "flat" | "renderOrder" | "offsetZ";
    skipStrokes: boolean;
    skipFills: boolean;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
