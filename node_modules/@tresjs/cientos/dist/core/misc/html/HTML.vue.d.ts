import { Ref } from 'vue';
import { PlaneGeometry } from 'three';
import { TresObject3D } from '@tresjs/core';
import { Mutable } from '@vueuse/core';

export interface HTMLProps {
    geometry?: any;
    material?: any;
    as?: string;
    transform?: boolean;
    portal?: Mutable<HTMLElement>;
    wrapperClass?: string;
    eps?: number;
    distanceFactor?: number;
    fullscreen?: boolean;
    center?: boolean;
    pointerEvents?: PointerEventsProperties;
    sprite?: boolean;
    zIndexRange?: Array<number>;
    occlude?: Ref<TresObject3D>[] | boolean | 'raycast' | 'blending';
}
type PointerEventsProperties = 'auto' | 'none' | 'visiblePainted' | 'visibleFill' | 'visibleStroke' | 'visible' | 'painted' | 'fill' | 'stroke' | 'all' | 'inherit';
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<HTMLProps>, {
    geometry: PlaneGeometry;
    zIndexRange: () => number[];
    as: string;
    transform: boolean;
    eps: number;
    pointerEvents: string;
    sprite: boolean;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    onOcclude: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<HTMLProps>, {
    geometry: PlaneGeometry;
    zIndexRange: () => number[];
    as: string;
    transform: boolean;
    eps: number;
    pointerEvents: string;
    sprite: boolean;
}>>> & {
    onOnOcclude?: ((...args: any[]) => any) | undefined;
}, {
    sprite: boolean;
    geometry: any;
    transform: boolean;
    as: string;
    eps: number;
    pointerEvents: PointerEventsProperties;
    zIndexRange: number[];
}, {}>, Readonly<Record<string, any>> & Record<string, any>>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
