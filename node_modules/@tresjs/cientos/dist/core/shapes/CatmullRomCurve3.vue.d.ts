import { TresColor } from '@tresjs/core';
import { Vector3 } from 'three';

type CurveType = 'centripetal' | 'chordal' | 'catmullrom';
type Points = Array<Vector3 | [number, number, number]>;
interface CatmullRomCurve3Props {
    segments?: number;
    closed?: boolean;
    curveType?: CurveType;
    tension?: number;
    points: Points;
    vertexColors?: TresColor[] | undefined;
    color?: TresColor;
    lineWidth?: number;
    alphaToCoverage?: boolean;
    dashed?: boolean;
    dashSize?: number;
    dashScale?: number;
    dashOffset?: number;
    gapSize?: number;
    worldUnits?: boolean;
}
declare const _default: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<CatmullRomCurve3Props>, {
    segments: number;
    closed: boolean;
    curveType: string;
    tension: number;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<CatmullRomCurve3Props>, {
    segments: number;
    closed: boolean;
    curveType: string;
    tension: number;
}>>>, {
    segments: number;
    closed: boolean;
    curveType: CurveType;
    tension: number;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
