import { TresColor } from '@tresjs/core';
import { ConeGeometry } from 'three';

export interface ConeProps {
    /**
     * The radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength of the cone.
     * @default [1, 1, 12, 12, false, 0, Math.PI * 2]
     * @type {any[]}
     * @memberof ConeProps
     * @see https://threejs.org/docs/#api/en/geometries/ConeGeometry
     */
    args?: ConstructorParameters<typeof ConeGeometry>;
    /**
     * The color of the cone.
     * @default 0xffffff
     * @type {TresColor}
     * @memberof ConeProps
     * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial
     */
    color?: TresColor;
}
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ConeProps>, {
    args: () => (number | boolean)[];
    color: string;
}>, {
    value: import('vue').ShallowRef<any>;
}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ConeProps>, {
    args: () => (number | boolean)[];
    color: string;
}>>>, {
    color: import('three').ColorRepresentation | [r: number, g: number, b: number];
    args: [radius?: number | undefined, height?: number | undefined, radialSegments?: number | undefined, heightSegments?: number | undefined, openEnded?: boolean | undefined, thetaStart?: number | undefined, thetaLength?: number | undefined];
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
