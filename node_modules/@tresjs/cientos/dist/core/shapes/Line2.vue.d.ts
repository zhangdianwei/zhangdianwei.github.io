import { Vector2, Vector3 } from 'three';
import { TresColor } from '@tresjs/core';

type Points = (Vector3 | Vector2 | [number, number, number] | [number, number] | number)[];
type VertexColors = Array<TresColor>;
export interface LineProps {
    points: Points;
    vertexColors?: VertexColors | null;
    color?: TresColor;
    lineWidth?: number;
    worldUnits?: boolean;
    alphaToCoverage?: boolean;
    dashed?: boolean;
    dashSize?: number;
    gapSize?: number;
    dashScale?: number;
    dashOffset?: number;
}
declare const _default: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<LineProps>, {
    vertexColors: null;
    color: string;
    lineWidth: number;
    worldUnits: boolean;
    alphaToCoverage: boolean;
    dashed: boolean;
    dashSize: number;
    gapSize: number;
    dashScale: number;
    dashOffset: number;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<LineProps>, {
    vertexColors: null;
    color: string;
    lineWidth: number;
    worldUnits: boolean;
    alphaToCoverage: boolean;
    dashed: boolean;
    dashSize: number;
    gapSize: number;
    dashScale: number;
    dashOffset: number;
}>>>, {
    color: import('three').ColorRepresentation | [r: number, g: number, b: number];
    alphaToCoverage: boolean;
    vertexColors: VertexColors | null;
    lineWidth: number;
    worldUnits: boolean;
    dashed: boolean;
    dashSize: number;
    gapSize: number;
    dashScale: number;
    dashOffset: number;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
