import { TresColor } from '@tresjs/core';

export type Float3 = [number, number, number];
export interface SuperFormulaProps {
    /**
     * Number of horizontal mesh segments
     */
    widthSegments?: number;
    /**
     * Number of vertical mesh segments
     */
    heightSegments?: number;
    /**
     * The 3D Superformula is the spherical product of 2 2D superformula curves: here called curves "A" and "B".
     * Number of radial arms/ripples of A, corresponding to "m" [in this article.](https://en.wikipedia.org/wiki/Superformula)
     */
    numArmsA?: number;
    /**
     * A's 3 exponents
     */
    expA?: Float3;
    /**
     * For B, number of radial arms/ripples
     */
    numArmsB?: number;
    /**
     * B's 3 exponents
     */
    expB?: Float3;
    /**
     * If no material is provided, a color for the default material
     */
    color?: TresColor;
}
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<SuperFormulaProps>, {
    widthSegments: number;
    heightSegments: number;
    numArmsA: number;
    expA: () => number[];
    numArmsB: number;
    expB: () => number[];
    color: string;
}>, {
    value: import('vue').ShallowRef<any>;
}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<SuperFormulaProps>, {
    widthSegments: number;
    heightSegments: number;
    numArmsA: number;
    expA: () => number[];
    numArmsB: number;
    expB: () => number[];
    color: string;
}>>>, {
    color: import('three').ColorRepresentation | [r: number, g: number, b: number];
    widthSegments: number;
    heightSegments: number;
    numArmsA: number;
    expA: Float3;
    numArmsB: number;
    expB: Float3;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
