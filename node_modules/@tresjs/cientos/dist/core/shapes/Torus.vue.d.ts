import { TresColor } from '@tresjs/core';
import { TorusGeometry } from 'three';

export interface TorusProps {
    /**
     * The radius, tube, radialSegments, tubularSegments, arc of the torus.
     * @default [1, 1, 16, 80, Math.PI * 2]
     * @type {number[]}
     * @memberof TorusProps
     * @see https://threejs.org/docs/#api/en/geometries/TorusGeometry
     */
    args?: ConstructorParameters<typeof TorusGeometry>;
    /**
     * The color of the torus.
     * @default 0xffffff
     * @type {TresColor}
     * @memberof TorusProps
     * @see https://threejs.org/docs/#api/en/materials/MeshBasicMaterial
     */
    color?: TresColor;
}
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TorusProps>, {
    args: () => number[];
    color: string;
}>, {
    value: import('vue').ShallowRef<any>;
}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<TorusProps>, {
    args: () => number[];
    color: string;
}>>>, {
    color: import('three').ColorRepresentation | [r: number, g: number, b: number];
    args: [radius?: number | undefined, tube?: number | undefined, radialSegments?: number | undefined, tubularSegments?: number | undefined, arc?: number | undefined];
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
