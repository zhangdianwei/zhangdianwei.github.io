import { Object3D, Box3, Vector3 } from 'three';

export interface Props {
    /**
     * If `into` is:
     * - omitted or explicitly `undefined`: position/scale children to fit into a 1 × 1 × 1 `Box3` at world origin.
     * - `null`: turn off `<Fit />`; reset scale/position of children.
     * - `number`: convert argument to `Vector3(number, number, number)`.
     * - `[number, number, number]`: convert argument to `Vector3`.
     * - `Vector3`: position/scale children to fit inside a `Box3` of size `Vector3` at target objects' cumulative center.
     * - `Box3`: position/scale children to fit inside `Box3`.
     * - `Object3D`: position/scale children to fit inside calculated `Box3`. [See `THREE.Box3.setFromObject`](https://threejs.org/docs/#api/en/math/Box3.setFromObject). `<Fit />` must not contain the `Object3D` and vice-versa.
     */
    into?: number | [number, number, number] | Vector3 | Box3 | Object3D | null;
    /** [See `precise` argument in `THREE.Box3.setFromObject`](https://threejs.org/docs/index.html?q=box3#api/en/math/Box3.setFromObject) */
    precise?: boolean;
}
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    into: () => Box3;
    precise: boolean;
}>, {
    instance: import('vue').ShallowRef<any>;
    fit: (into?: number | Box3 | Vector3 | Object3D<import('three').Object3DEventMap> | [number, number, number] | null | undefined, precise?: boolean) => void;
    update: () => void;
}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    into: () => Box3;
    precise: boolean;
}>>>, {
    into: number | Box3 | Vector3 | Object3D<import('three').Object3DEventMap> | [number, number, number] | null;
    precise: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
