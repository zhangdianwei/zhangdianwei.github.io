import { TresColor } from '@tresjs/core';

export interface PrecipitationProps {
    /**
     * The size of the drops.
     *
     * @type {number}
     * @memberof PrecipitationProps
     * @default 0.1
     */
    size?: number;
    /**
     * The size of the precipitation area.
     *
     * @type {[number, number, number]}
     * @memberof PrecipitationProps
     * @default "[10, 10, 20]"
     */
    area?: [number, number, number];
    /**
     * The color of the shadows.
     *
     * @default '0xffffff'
     * @type {TresColor}
     * @memberof PrecipitationProps
     *
     */
    color?: TresColor;
    /**
     * Color texture of the drops.
     *
     * @type {string}
     * @memberof StarsProps
     * @default null
     */
    map?: null;
    /**
     * texture of the alphaMap Drops.
     *
     * @type {string}
     * @memberof StarsProps
     * @default null
     */
    alphaMap?: string;
    /**
     * enables the WebGL to know when not to render the pixel.
     *
     * @type {number}
     * @memberof StarsProps
     * @default 0.01
     */
    alphaTest?: number;
    /**
     * Set the opacity of the drops.
     *
     * @type {number}
     * @memberof StarsProps
     * @default 0.8
     */
    opacity?: number;
    /**
     * number of drops.
     *
     * @type {number}
     * @memberof StarsProps
     * @default 5000
     */
    count?: number;
    /**
     * Speed of drops.
     *
     * @type {number}
     * @memberof StarsProps
     * @default 5000
     */
    speed?: number;
    /**
     * Add randomness to the drops.
     *
     * @default 0.5
     * @type {number}
     * @memberof ContactShadowsProps
     *
     */
    randomness?: number;
    /**
     * Whether the shadows should write to the depth buffer or not.
     *
     * @default false
     * @type {boolean}
     * @memberof ContactShadowsProps
     *
     */
    depthWrite?: boolean;
    /**
     * show transparency on the drops texture.
     *
     * @type {boolean}
     * @memberof StarsProps
     * @default true
     */
    transparent?: boolean;
    /**
     * keep the same size regardless distance.
     *
     * @type {boolean}
     * @memberof StarsProps
     * @default true
     */
    sizeAttenuation?: boolean;
}
declare const _default: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PrecipitationProps>, {
    size: number;
    area: () => number[];
    color: number;
    alphaTest: number;
    opacity: number;
    count: number;
    speed: number;
    randomness: number;
    depthWrite: boolean;
    transparent: boolean;
    sizeAttenuation: boolean;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<PrecipitationProps>, {
    size: number;
    area: () => number[];
    color: number;
    alphaTest: number;
    opacity: number;
    count: number;
    speed: number;
    randomness: number;
    depthWrite: boolean;
    transparent: boolean;
    sizeAttenuation: boolean;
}>>>, {
    speed: number;
    color: import('three').ColorRepresentation | [r: number, g: number, b: number];
    depthWrite: boolean;
    opacity: number;
    transparent: boolean;
    alphaTest: number;
    count: number;
    size: number;
    area: [number, number, number];
    randomness: number;
    sizeAttenuation: boolean;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
