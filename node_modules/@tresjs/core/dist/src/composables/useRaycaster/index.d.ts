import { TresContext } from '../useTresContextProvider';
import { Ref } from 'vue';
import { Intersection, Object3D, Object3DEventMap } from 'three';

export type Intersects = Intersection<Object3D<Object3DEventMap>>[];
interface PointerMoveEventPayload {
    intersects?: Intersects;
    event: PointerEvent;
}
interface PointerClickEventPayload {
    intersects: Intersects;
    event: PointerEvent;
}
export declare const useRaycaster: (objects: Ref<Object3D[]>, { renderer, camera, raycaster }: Pick<TresContext, 'renderer' | 'camera' | 'raycaster'>) => {
    intersects: import('vue').ComputedRef<Intersects>;
    onClick: (fn: (value: PointerClickEventPayload) => void) => () => void;
    onPointerMove: (fn: (value: PointerMoveEventPayload) => void) => () => void;
};
export {};
